diff --git a/aclocal.m4 b/aclocal.m4
index a43b24a..bd09440 100644
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -453,18 +453,6 @@ AC_DEFUN([FPTOOLS_SET_C_LD_FLAGS],
         $2="$$2 -fno-stack-protector"
     fi
 
-    # Reduce memory usage when linking. See trac #5240.
-    if test -n "$LdHashSize31"
-    then
-        $3="$$3 -Wl,$LdHashSize31"
-        $4="$$4     $LdHashSize31"
-    fi
-    if test -n "$LdReduceMemoryOverheads"
-    then
-        $3="$$3 -Wl,$LdReduceMemoryOverheads"
-        $4="$$4     $LdReduceMemoryOverheads"
-    fi
-
     rm -f conftest.c conftest.o
     AC_MSG_RESULT([done])
 ])
@@ -873,27 +861,6 @@ AC_SUBST([LdXFlag])
 ])# FP_PROG_LD_X
 
 
-# FP_PROG_LD_HashSize31
-# ------------
-# Sets the output variable LdHashSize31 to --hash-size=31 if ld supports
-# this flag. Otherwise the variable's value is empty.
-AC_DEFUN([FP_PROG_LD_HashSize31],
-[
-FP_PROG_LD_FLAG([--hash-size=31],[LdHashSize31])
-])# FP_PROG_LD_HashSize31
-
-
-# FP_PROG_LD_ReduceMemoryOverheads
-# ------------
-# Sets the output variable LdReduceMemoryOverheads to
-# --reduce-memory-overheads if ld supports this flag.
-# Otherwise the variable's value is empty.
-AC_DEFUN([FP_PROG_LD_ReduceMemoryOverheads],
-[
-FP_PROG_LD_FLAG([--reduce-memory-overheads],[LdReduceMemoryOverheads])
-])# FP_PROG_LD_ReduceMemoryOverheads
-
-
 # FP_PROG_LD_BUILD_ID
 # ------------
 
diff --git a/compiler/main/SysTools.lhs b/compiler/main/SysTools.lhs
index 49314f2..0130fbf 100644
--- a/compiler/main/SysTools.lhs
+++ b/compiler/main/SysTools.lhs
@@ -25,6 +25,9 @@ module SysTools (
         figureLlvmVersion,
         readElfSection,
 
+        LinkerInfo(..),
+        getLinkerInfo,
+
         askCc,
 
         touch,                  -- String -> String -> IO ()
@@ -544,12 +547,113 @@ figureLlvmVersion dflags = do
                           text "Make sure you have installed LLVM"]
                 return Nothing)
   return ver
-  
+
+
+{- Note [Run-time linker info]
+
+See also: Trac #5240, Trac #6063
+
+Before 'runLink', we need to be sure to get the relevant information
+about the linker we're using at runtime to see if we need any extra
+options. For example, GNU ld requires '--reduce-memory-overheads' and
+'--hash-size=31' in order to use reasonable amounts of memory (see
+trac #5240.) But this isn't supported in GNU gold.
+
+Generally, the linker changing from what was detected at ./configure
+time has always been possible using -pgml, but on Linux it can happen
+'transparently' by installing packages like binutils-gold, which
+change what /usr/bin/ld actually points to. It can also simply happen
+by using a binary distribution: GHC was built on a machine using GNU ld,
+and installed on a machine using GNU gold.
+
+CLANG vs GCC notes:
+
+For gcc, 'gcc -Wl,--version' gives a bunch of output about how to
+invoke the linker before the version information string. For 'clang',
+the version information for 'ld' is all that's output. For this
+reason, we typically need to slurp up all of the standard error output
+and look through it.
+
+-}
+
+-- LinkerInfo contains any extra options needed in 'runLink'
+data LinkerInfo
+  = GnuLD    [Option]
+  | GnuGold  [Option]
+  | DarwinLD [Option]
+  deriving Eq
+
+neededLinkArgs :: LinkerInfo -> [Option]
+neededLinkArgs (GnuLD o)     = o
+neededLinkArgs (GnuGold o)   = o
+neededLinkArgs (DarwinLD o)  = o
+
+-- See Note [Run-time linker info]. Trac #6063
+getLinkerInfo :: DynFlags -> IO (Maybe LinkerInfo)
+getLinkerInfo dflags = do
+  let platform = targetPlatform dflags
+      os = platformOS platform
+      (pgm,_) = pgm_l dflags
+
+      -- Try to grab the info from the process output.
+      parseLinkerInfo stdo _stde _exitc =
+        case os of
+          _ | any ("GNU ld" `isPrefixOf`) stdo ->
+            -- GNU ld specifically needs to use less memory. This especially
+            -- hurts on small object files. Trac #5240.
+            return (GnuLD $ map Option ["-Wl,--hash-size=31",
+                                        "-Wl,--reduce-memory-overheads"])
+
+          _ | any ("GNU gold" `isPrefixOf`) stdo ->
+            -- GNU gold does not require any special arguments.
+            return (GnuGold [])
+
+          -- Unknown linker.
+          _ -> fail "invalid --version output, or linker is unsupported"
+
+  -- Process the executable call
+  ver <- catchIO (do
+             case os of
+               OSDarwin ->
+                 -- Darwin has neither GNU Gold or GNU LD, but a strange linker
+                 -- that doesn't support --version. We can just assume that's
+                 -- what we're using.
+                 return $ Just $ DarwinLD []
+               OSMinGW32 ->
+                 -- GHC doesn't support anything but GNU ld on Windows anyway.
+                 -- Process creation is also fairly expensive on win32, so
+                 -- we short-circuit here.
+                 return $ Just $ GnuLD $ map Option ["-Wl,--hash-size=31",
+                                                     "-Wl,--reduce-memory-overheads"]
+               _ -> do
+                 -- In practice, we use the compiler as the linker here. Pass
+                 -- -Wl,--version to get linker version info.
+                 (exitc, stdo, stde) <- readProcessWithExitCode pgm
+                                        ["-Wl,--version"] ""
+                 -- Split the output by lines to make certain kinds
+                 -- of processing easier. In particular, 'clang' and 'gcc'
+                 -- have slightly different outputs for '-Wl,--version', but
+                 -- it's still easy to figure out.
+                 v <- parseLinkerInfo (lines stdo) (lines stde) exitc
+                 return $ Just v
+            )
+            (\err -> do
+                debugTraceMsg dflags 2
+                    (text "Error (figuring out linker information):" <+>
+                     text (show err))
+                errorMsg dflags $ hang (text "Warning:") 9 $
+                  text "Couldn't figure out linker information!" $$
+                  text "Make sure you're using GNU ld, GNU gold" <+>
+                  text "or the built in OS X linker, etc."
+                return Nothing)
+  return ver
 
 runLink :: DynFlags -> [Option] -> IO ()
 runLink dflags args = do
+  -- See Note [Run-time linker info]
+  linkargs <- (maybe [] neededLinkArgs) `fmap` getLinkerInfo dflags
   let (p,args0) = pgm_l dflags
-      args1 = args0 ++ args
+      args1     = args0 ++ args ++ linkargs
   mb_env <- getGccEnv args1
   runSomethingFiltered dflags id "Linker" p args1 mb_env
 
diff --git a/configure.ac b/configure.ac
index 1986367..b42c226 100644
--- a/configure.ac
+++ b/configure.ac
@@ -544,9 +544,6 @@ dnl ** look to see if we have a C compiler using an llvm back end.
 dnl
 FP_CC_LLVM_BACKEND
 
-FP_PROG_LD_HashSize31
-FP_PROG_LD_ReduceMemoryOverheads
-
 FPTOOLS_SET_C_LD_FLAGS([target],[CFLAGS],[LDFLAGS],[IGNORE_LINKER_LD_FLAGS],[CPPFLAGS])
 FPTOOLS_SET_C_LD_FLAGS([build],[CONF_CC_OPTS_STAGE0],[CONF_GCC_LINKER_OPTS_STAGE0],[CONF_LD_LINKER_OPTS_STAGE0],[CONF_CPP_OPTS_STAGE0])
 FPTOOLS_SET_C_LD_FLAGS([target],[CONF_CC_OPTS_STAGE1],[CONF_GCC_LINKER_OPTS_STAGE1],[CONF_LD_LINKER_OPTS_STAGE1],[CONF_CPP_OPTS_STAGE1])
diff --git a/distrib/configure.ac.in b/distrib/configure.ac.in
index 8cb57c4..aad13f3 100644
--- a/distrib/configure.ac.in
+++ b/distrib/configure.ac.in
@@ -70,9 +70,6 @@ export CC
 FP_GCC_VERSION
 AC_PROG_CPP
 
-FP_PROG_LD_HashSize31
-FP_PROG_LD_ReduceMemoryOverheads
-
 #
 dnl ** Check gcc version and flags we need to pass it **
 #
